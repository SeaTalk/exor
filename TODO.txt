# Needed to implement a mechanism to distinguish between different type of entries.
   1. add one byte to indicate the type of entry, right after the link. make the "move to next entry" works properly with this. [done]
   2. 

# Begin to implement a basic dictionary structure [DONE]

Problem: __unable to move syscall out of main__
         The problem caused by using $1 as the placeholder of the macro 
         argument, which conflicts to the usage of immediate operand.
{Done} : Use parentheses to enclose the operand like $(_YourNumber_)

Problem: __Something wrong with loading the string length from memory__
         No problem with compiling, just giving no result. While no problem when passing an immediate number to register.

# Improve the dictionary structure to make it store data

1. __Change the Dictionary into a linked list structure__
   a. Create a new quadword to store the next entry address. Since it's
      not possible to access the absolute address, we use the initial
      address of Dictionary and offset to represent an entry address.

      _You cannot calculate the offset of the label before defined._
      _You also cannot_ update the stored data by updating the variable you assigned to it.

   [Done] A twice-addressing mechanic is implement. We setup a base address
   of dictionary, and then for each entry we use a quad to store the offset against base address. When addressing, we first load the offset into the register, and then load the address into the register with dictionary base and the offset right in the register.

   _Fix the problem caused by puting the main routine into the loop_
   [Done] Clear all registers before next iteration. Remember when using xor,
   two operands have to be identical.

2. __Expand the Dictionary structure__
   a. There will be more than one type of entry. First we have get the string
      as the fundamental structure.

   b. Secondly, we need another type of entry, which definition is composed by
      a couple of words, that refer to other entries.

   c. Thirdly, we are going have the entry that contains executable code. This 
      requires more effort, and takes longer time to figure out a proper mechanism.

   if we are going to make executable code, the first problem we need to figure out where should the instruction pointer jump to after execution. For the entry contains code, we know that after executing the code, there is nor more labels to indicate where should the IP jump to. Thus we need to specify the final destination after executing the code.

   So all of them needs a mask byte that indicate its attribute. 
